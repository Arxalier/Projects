# Logic Gate Solver
def and_gate(a: int, b: int): return a*b
def or_gate(a:int, b: int): return int(bool(a+b))
def not_gate(a:int): return abs(a-1)
def nand_gate(a: int, b: int): return not_gate(and_gate(a,b))
def nor_gate(a: int, b: int): return not_gate(or_gate(a, b))
def xor_gate(a: int, b: int): return a+b==1
def xnor_gate(a:int, b:int): return not_gate(xor_gate(a,b))
#question = "not not 1 and (0 or 1)"
#question = "1 or 0 and not (0 or 0)"
# question = "not not (0 and 1) and 1 and 1"
question = input("Enter your boolean algebraic expression: ")
slice = ""
question=("("+question+")").replace("("," ( ").replace(")"," ) ")
splitTerms=[]
terms = question.split()
for term in terms:
	if term.isnumeric(): splitTerms.append(int(term))
	else: splitTerms.append(term)
def solveExpression(expression: list):
	print("Solving: "+str(expression))
	while "not" in expression:
		for term in range(len(expression)-1,-1,-1):
			if expression[term]=="not":
				expression[term:term+2]=[not_gate(expression[term+1])]
				print(expression)
				break
	while "and" in expression:
		for term in range(len(expression)-1,-1,-1):
			if expression[term]=="and":
				expression[term-1:term+2]=[and_gate(expression[term-1], expression[term+1])]
				print(expression)
	while "or" in expression:
		for term in range(len(expression)-1,-1,-1):
			if expression[term]=="or":
				expression[term-1:term+2]=[or_gate(expression[term-1], expression[term+1])]
				print("Evaluated to: "+str(expression))					
	return expression
while ")" in splitTerms:
	print(splitTerms)
	startParanthesis=endParanthesis=0
	for i in range(len(splitTerms)):
		if splitTerms[i]==")":
			endParanthesis = i
			break
	for j in range(endParanthesis,-1,-1):
		if splitTerms[j]=="(":
			startParanthesis = j
			break
	splitTerms[startParanthesis:endParanthesis+1]=solveExpression(splitTerms[startParanthesis+1: endParanthesis])
print("The answer is "+str(splitTerms[0]))
	
