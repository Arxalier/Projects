import mysql.connector as sqltor
# THINGS TO DO
# Change userPassword, username

userPassword = "2444"
username = "root"
con = sqltor.connect(user=username, password=userPassword, host="localhost")
databaseCursor = con.cursor()
databaseCursor.execute("CREATE DATABASE IF NOT EXISTS rubikscube;")
faceCon = sqltor.connect(user=username, password=userPassword, host="localhost", database="rubikscube")
faceCursor = faceCon.cursor()
faceCursor.execute("SHOW TABLES;")
rowCount = faceCursor.fetchall()
if len(rowCount) != 6:
    faceCursor.execute("CREATE TABLE IF NOT EXISTS face1 (row1 char(1), row2 char(1), row3 char(3));")
    faceCursor.execute("CREATE TABLE IF NOT EXISTS face2 (row1 char(1), row2 char(1), row3 char(3));")
    faceCursor.execute("CREATE TABLE IF NOT EXISTS face3 (row1 char(1), row2 char(1), row3 char(3));")
    faceCursor.execute("CREATE TABLE IF NOT EXISTS face4 (row1 char(1), row2 char(1), row3 char(3));")
    faceCursor.execute("CREATE TABLE IF NOT EXISTS face5 (row1 char(1), row2 char(1), row3 char(3));")
    faceCursor.execute("CREATE TABLE IF NOT EXISTS face6 (row1 char(1), row2 char(1), row3 char(3));")

cube = []
# TOP FRONT RIGHT LEFT BACK DOWN
w= "\033[1;37mW\033[0m"  # White
o = "\033[1;35mO\033[0m"   # Orange
g = "\033[1;32mG\033[0m"   # Green
b = "\033[1;34mB\033[0m"   # Blue
r = "\033[1;31mR\033[0m"   # Red
y = "\033[1;33mY\033[0m"   # Yellow
text = w + o + g + b + r + y
#colorsDefault = "WOGBRY"
colors = ["W","O","G","B","R","Y"]
# colors = "WOGBRY"
for color in range(len(colors)):
    face = []
    for k in range(3): face.append([colors[color] for i in range(3)])
    cube.append(face)
def saveCube():
    global faceCursor
    global faceCon
    faceCursor.execute("TRUNCATE TABLE face1;")
    faceCursor.execute("TRUNCATE TABLE face2;")
    faceCursor.execute("TRUNCATE TABLE face3;")
    faceCursor.execute("TRUNCATE TABLE face4;")
    faceCursor.execute("TRUNCATE TABLE face5;")
    faceCursor.execute("TRUNCATE TABLE face6;")
    faceCursor.execute(f"INSERT INTO face1 (row1, row2, row3) VALUES {str(cube[0][0]).replace('[','(').replace(']',')')};")
    faceCursor.execute(f"INSERT INTO face1 (row1, row2, row3) VALUES {str(cube[0][1]).replace('[','(').replace(']',')')};")
    faceCursor.execute(f"INSERT INTO face1 (row1, row2, row3) VALUES {str(cube[0][2]).replace('[','(').replace(']',')')};")
    faceCursor.execute(f"INSERT INTO face2 (row1, row2, row3) VALUES {str(cube[1][0]).replace('[','(').replace(']',')')};")
    faceCursor.execute(f"INSERT INTO face2 (row1, row2, row3) VALUES {str(cube[1][1]).replace('[','(').replace(']',')')};")
    faceCursor.execute(f"INSERT INTO face2 (row1, row2, row3) VALUES {str(cube[1][2]).replace('[','(').replace(']',')')};")
    faceCursor.execute(f"INSERT INTO face3 (row1, row2, row3) VALUES {str(cube[2][0]).replace('[','(').replace(']',')')};")
    faceCursor.execute(f"INSERT INTO face3 (row1, row2, row3) VALUES {str(cube[2][1]).replace('[','(').replace(']',')')};")
    faceCursor.execute(f"INSERT INTO face3 (row1, row2, row3) VALUES {str(cube[2][2]).replace('[','(').replace(']',')')};")
    faceCursor.execute(f"INSERT INTO face4 (row1, row2, row3) VALUES {str(cube[3][0]).replace('[','(').replace(']',')')};")
    faceCursor.execute(f"INSERT INTO face4 (row1, row2, row3) VALUES {str(cube[3][1]).replace('[','(').replace(']',')')};")
    faceCursor.execute(f"INSERT INTO face4 (row1, row2, row3) VALUES {str(cube[3][2]).replace('[','(').replace(']',')')};")
    faceCursor.execute(f"INSERT INTO face5 (row1, row2, row3) VALUES {str(cube[4][0]).replace('[','(').replace(']',')')};")
    faceCursor.execute(f"INSERT INTO face5 (row1, row2, row3) VALUES {str(cube[4][1]).replace('[','(').replace(']',')')};")
    faceCursor.execute(f"INSERT INTO face5 (row1, row2, row3) VALUES {str(cube[4][2]).replace('[','(').replace(']',')')};")
    faceCursor.execute(f"INSERT INTO face6 (row1, row2, row3) VALUES {str(cube[5][0]).replace('[','(').replace(']',')')};")
    faceCursor.execute(f"INSERT INTO face6 (row1, row2, row3) VALUES {str(cube[5][1]).replace('[','(').replace(']',')')};")
    faceCursor.execute(f"INSERT INTO face6 (row1, row2, row3) VALUES {str(cube[5][2]).replace('[','(').replace(']',')')};")
    faceCon.commit()
def loadCube():
    global faceCursor
    global faceCon
    global cube
    faceCursor.execute("SELECT * FROM face1;")
    face1=faceCursor.fetchall()
    cube[0][0], cube[0][1], cube[0][2] = face1[0], face1[1], face1[2]
    faceCursor.execute("SELECT * FROM face2;")
    face2=faceCursor.fetchall()
    cube[1][0], cube[1][1], cube[1][2] = face2[0], face2[1], face2[2]
    faceCursor.execute("SELECT * FROM face3;")
    face3=faceCursor.fetchall()
    cube[2][0], cube[2][1], cube[2][2] = face3[0], face3[1], face3[2]
    faceCursor.execute("SELECT * FROM face4;")
    face4=faceCursor.fetchall()
    cube[3][0], cube[3][1], cube[3][2] = face4[0], face4[1], face4[2]
    faceCursor.execute("SELECT * FROM face5;")
    face5=faceCursor.fetchall()
    cube[4][0], cube[4][1], cube[4][2] = face5[0], face5[1], face5[2]
    faceCursor.execute("SELECT * FROM face6;")
    face6=faceCursor.fetchall()
    cube[5][0], cube[5][1], cube[5][2] = face5[0], face5[1], face5[2]
    faceCon.commit()
        
'''
count=1
face=[]
for i in range(6):
    face=[]
    for k in range(3):
        row=[]
        for j in range(3):
            row.append(count)
            count+=1
        face.append(row)
    cube.append(face)'''
# print(cube) # Test for cube rigging
# for face in cube: print(face)
# CUBE RIG
def renderCube():
    layout="""
   _______.
  /{}/{}/{} /| 
 /{}/{}/{} / | 
/{}/{}/{} / {}/
+—+—+—+ {}/|
|{}|{}|{}|{}/{}/ 
+—+—+—+/{}/|
|{}|{}|{}|{}/{}/
+—+—+—+/{}/
|{}|{}|{}|{}/
+—+—+—+/
""".format(    cube[0][0][0], cube[0][0][1], cube[0][0][2], cube[0][1][0],cube[0][1][1], cube[0][1][2], cube[0][2][0], cube[0][2][1], cube[0][2][2], cube[2][0][2], cube[2][0][1], cube[1][0][0], cube[1][0][1], cube[1][0][2], cube[2][0][0], cube[2][1][2], cube[2][1][1], cube[1][1][0], cube[1][1][1], cube[1][1][2], cube[2][1][0], cube[2][2][2], cube[2][2][1], cube[1][2][0], cube[1][2][1], cube[1][2][2], cube[2][2][0])
    print(layout)

# Functions for movement use
def transpose(original_array):
    # Row 1 becomes Column 3 -> 90° Clockwise
    array=original_array[:]
    transposedArray=[]
    # Take first element of each row 
    for elem in range(0, len(array[0])):
        newRow=[]
        for row in array:
            newRow.append(row[elem])    
        transposedArray.append(newRow[::-1])
    return transposedArray
def mirror(original_array):
    mirrored=[]
    for i in original_array:
        mirrored.append(i[::-1])
    return mirrored

# Principal Moves
def y(times=1): # Moves clockwise wrt y axis
    for i in range(times):
        '''cube[1], cube[3], cube[4], cube[2] = cube[2], cube[1], mirror(cube[3]), mirror(cube[4])
        cube[0], cube[5] = transpose(cube[0]), transpose(transpose(transpose(cube[5])))'''
        cube[1], cube[2], cube[4], cube[3]=cube[2], cube[4], cube[3], cube[1] 
        cube[0]=transpose(cube[0])
        cube[5]=transpose(cube[5])
        
def x(times=1): # Moves clockwise wrt x axis
    for i in range(times):
        '''cube[1], cube[0], cube[4], cube[5] = cube[5], cube[1], cube[0][::-1], cube[4][::-1]
        cube[3], cube[2] = transpose(transpose(transpose(cube[3]))), transpose(cube[2])'''
        cube[2]=transpose(cube[2])
        cube[3]=transpose(transpose(transpose(cube[3])))
        cube[0], cube[1], cube[5], cube[4]=cube[1], cube[5][::-1], mirror(cube[4]), mirror(cube[0])[::-1]
        
def z(times=1): # Moves clockwise wrt z axis
    for i in range(times):  
        '''cube[0], cube[2], cube[5], cube[3] = transpose(cube[3], False), transpose(cube[0], False), transpose(cube[2], False), transpose(cube[5], False)
        cube[1], cube[4] = transpose(cube[1]), transpose(cube[4])'''
        cube[1], cube[4]=transpose(cube[1]), transpose(transpose(transpose(cube[4])))
        cube[0], cube[3], cube[5], cube[2]=transpose(cube[3]), transpose(transpose(transpose(mirror(cube[5])))), transpose(mirror(cube[2])), transpose(cube[0])
def u(times=1):
    for i in range(times):
        '''cube[1][0], cube[3][0], cube[4][0], cube[2][0]= cube[2][0], cube[1][0], cube[3][0][::-1], cube[4][0][::-1]'''
        cube[0]=transpose(cube[0])
        cube[1][0], cube[2][0], cube[4][0], cube[3][0]=cube[2][0], cube[4][0], cube[3][0], cube[1][0]
# Using x, y, z and u we can recreate every other move
def r(times=1):
    for i in range(times):  
        z(3)
        u()
        z()
def l(times=1):
    for i in range(times):
        z()
        u()
        z(3)
def d(times=1):
    for i in range(times):
        z(2)
        u()
        z(2)
def f(times=1):
    for i in range(times):
        x()
        u()
        x(3)
def b(times=1):
    for i in range(times):
        x(3)
        u()
        x()
def m(times=1):
    for i in range(times):
        l(3)
        r()
        x(3)
# Move input
renderCube()
movePreset = "R2 L’ D F2 R’ D’ R’ L U’ D R D B2 R’ U D2".split()
movePreset = "U2 F L2 U2 R2 F L2 F2 L' D' B2 R D2 R' B' U' L' B' x' y' U' R F R' U' D L' U2 L2 U' L' U R' U R R' U R U R' U' R F R U' R' U' R U R' F' R U' R U R U R U' R' U' R2 U".split()
#movePreset="u2 u2"
#movePreset="B D F' B' D L2 U L U' B D' R B R D' R L' F U2 D".split()
#movePreset="U2 R2 F2 U2 D2 F2 L2 U2".split() #hi
#movePreset= "U2 R2 L2 U2 R2 L2".split()
#movePreset = "F2 B2 U D’ R2 L2 U D’".split()
# movePreset = []
count=0
choice = input("Do you want to load your last saved cube? Y/N (Press N if newly opened)")
if choice.lower() == 'y':
    loadingMode = True
    print("Loadingmode activated")
else: loadingMode = False
print(loadingMode)
while True:
    '''if count < len(movePreset) and not loadingMode:
        move = movePreset[count].lower().replace(' ', '').replace("’", "'")
        print(move)
        count+=1'''
    if loadingMode:
        loadCube()
        # count=len(movePreset)
        print("Cube loaded from database successfully!")
        renderCube()
        loadingMode=False
        continue
    else:
        print("Enter your move: r, u, l, d, f, b, m. You can also enter moves like r2 or r'.")
        move = input().lower().replace(' ', '').replace("’", "'")
    if move[0]=="x": 
        x()
        if move[-1]=="'": x(2)
        elif move[-1]=="2": x()
    elif move[0]=="y": 
        y()
        if move[-1]=="'": y(2)
        elif move[-1]=="2": y()
    elif move[0]=="z": 
        z()
        if move[-1]=="'": z(2)
        elif move[-1]=="2": z()
    elif move[0]=="r": 
        r()
        if move[-1]=="'": r(2)
        elif move[-1]=="2": r()
    elif move[0]=="u": 
        u()
        if move[-1]=="'": u(2)
        elif move[-1]=="2": u() 
    elif move[0]=="l": 
        l()
        if move[-1]=="'": l(2)
        elif move[-1]=="2": l()
    elif move[0]=="d": 
        d()
        if move[-1]=="'": d(2)
        elif move[-1]=="2": d() 
    elif move[0]=="f": 
        f()
        if move[-1]=="'": f(2)
        elif move[-1]=="2": f()
    elif move[0]=="b": 
        b()
        if move[-1]=="'": b(2)
        elif move[-1]=="2": b()
    elif move[0]=="m": 
        m()
        if move[-1]=="'": m(2)
        elif move[-1]=="2": m()                                     
    for face in cube:
        print(face)
    renderCube()
    saveCube()
    print("Cube saved into database successfully!")
    

