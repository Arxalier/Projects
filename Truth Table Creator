# Logic Gate Solver
import itertools
def and_gate(a: int, b: int): return a*b
def or_gate(a:int, b: int): return int(bool(a+b))
def not_gate(a:int): return abs(a-1)
def nand_gate(a: int, b: int): return not_gate(and_gate(a,b))
def nor_gate(a: int, b: int): return not_gate(or_gate(a, b))
def xor_gate(a: int, b: int): return int(a+b==1)
def xnor_gate(a:int, b:int): return not_gate(xor_gate(a,b))
def implies(a:int, b:int): return (or_gate(not_gate(a), b))

question = input("Enter your boolean algebraic expression: ")
q=question
question=("("+question+")").replace("("," ( ").replace(")"," ) ")
splitTerms=[]
terms = question.split()
pins = []
for term in terms:
	if term.isnumeric(): splitTerms.append(int(term))
	else: splitTerms.append(term)
# print(splitTerms)
for t in splitTerms[:]:
	if str(t) in "ABCDEFGHIJKLMNOPQRSTUVWXYZ" and len(t)==1 and t not in pins:
		pins.append(t)
possibilities = [[0,1]]*len(pins)
combinations = list(itertools.product(*possibilities))
counter = 0
def solveExpression(expression: list):
	global counter
	counter+=1
	print(str(counter) + ". Solving: "+str(expression))
	while "not" in expression:
		for term in range(len(expression)-1,-1,-1):
			if expression[term]=="not":
				expression[term:term+2]=[not_gate(expression[term+1])]
				print(expression)
				break
	while "and" in expression:
		for term in range(len(expression)-1,-1,-1):
			if expression[term]=="and":
				expression[term-1:term+2]=[and_gate(expression[term-1], expression[term+1])]
				print(expression)
	while "or" in expression:
		for term in range(len(expression)-1,-1,-1):
			if expression[term]=="or":
				expression[term-1:term+2]=[or_gate(expression[term-1], expression[term+1])]
	while "xor" in expression:
		for term in range(len(expression)-1,-1,-1):
			if expression[term]=="xor":
				expression[term-1:term+2]=[xor_gate(expression[term-1], expression[term+1])]
	while "implies" in expression:
		for term in range(len(expression)-1,-1,-1):
			if expression[term]=="implies":
				expression[term-1:term+2]=[implies(expression[term-1], expression[term+1])]
				print("Evaluated to: "+str(expression))					
	return expression
rawSplitTerms=splitTerms[:]
truthTable = [pins+[q]]
for combination in combinations:
	print('Current combination is '+str(combination))
	print('Current split terms are',splitTerms)
	splitTerms[:]=rawSplitTerms[:]
	for pin in range(len(combination)):
		currentPin=pins[pin]
		correspondingValue=combination[pin]
		print(currentPin, correspondingValue)
		for elem in range(len(splitTerms)):
			if splitTerms[elem]==currentPin:
				splitTerms[elem]=correspondingValue	
	while ")" in splitTerms:
		print(splitTerms)
		startParanthesis=endParanthesis=0
		for i in range(len(splitTerms)):
			if splitTerms[i]==")":
				endParanthesis = i
				break
		for j in range(endParanthesis,-1,-1):
			if splitTerms[j]=="(":
				startParanthesis = j
				break
		splitTerms[startParanthesis:endParanthesis+1]=solveExpression(splitTerms[startParanthesis+1: endParanthesis])
	truthTable.append(list(combination)+[splitTerms[0]])
	print("The answer is "+str(splitTerms[0]))
print('â€”'*20)
for row in truthTable:
	print(' | '.join([str(i) for i in row]))
